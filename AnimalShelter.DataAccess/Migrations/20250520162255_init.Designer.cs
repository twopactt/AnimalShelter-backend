// <auto-generated />
using System;
using AnimalShelter.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AnimalShelter.DataAccess.Migrations
{
    [DbContext(typeof(AnimalShelterDbContext))]
    [Migration("20250520162255_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.AdoptionApplicationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ApplicationDate")
                        .HasColumnType("date");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("StatusAdoptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("StatusAdoptionId");

                    b.HasIndex("UserId");

                    b.ToTable("AdoptionApplication");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.AdoptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ApplicationDate")
                        .HasMaxLength(250)
                        .HasColumnType("date");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Adoption");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.AnimalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<Guid>("AnimalStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TypeAnimalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnimalStatusId");

                    b.HasIndex("TypeAnimalId");

                    b.ToTable("Animal");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.AnimalStatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("AnimalStatus");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.EmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.StatusAdoptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("StatusAdoption");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.TemporaryAccommodationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateAnimalCapture")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateAnimalReturn")
                        .HasColumnType("date");

                    b.Property<Guid?>("EmployeeEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("EmployeeEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("TemporaryAccommodation");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.TypeAnimalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("TypeAnimal");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.AdoptionApplicationEntity", b =>
                {
                    b.HasOne("AnimalShelter.DataAccess.Entities.AnimalEntity", "Animal")
                        .WithMany("AdoptionApplication")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimalShelter.DataAccess.Entities.StatusAdoptionEntity", "StatusAdoption")
                        .WithMany("AdoptionApplication")
                        .HasForeignKey("StatusAdoptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimalShelter.DataAccess.Entities.UserEntity", "User")
                        .WithMany("AdoptionApplication")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("StatusAdoption");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.AdoptionEntity", b =>
                {
                    b.HasOne("AnimalShelter.DataAccess.Entities.AnimalEntity", "Animal")
                        .WithMany("Adoption")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimalShelter.DataAccess.Entities.EmployeeEntity", "Employee")
                        .WithMany("Adoption")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimalShelter.DataAccess.Entities.UserEntity", "User")
                        .WithMany("Adoption")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.AnimalEntity", b =>
                {
                    b.HasOne("AnimalShelter.DataAccess.Entities.AnimalStatusEntity", "AnimalStatus")
                        .WithMany("Animal")
                        .HasForeignKey("AnimalStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimalShelter.DataAccess.Entities.TypeAnimalEntity", "TypeAnimal")
                        .WithMany("Animal")
                        .HasForeignKey("TypeAnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnimalStatus");

                    b.Navigation("TypeAnimal");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("AnimalShelter.DataAccess.Entities.UserEntity", "User")
                        .WithMany("Employee")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.TemporaryAccommodationEntity", b =>
                {
                    b.HasOne("AnimalShelter.DataAccess.Entities.AnimalEntity", "Animal")
                        .WithMany("TemporaryAccommodation")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimalShelter.DataAccess.Entities.EmployeeEntity", null)
                        .WithMany("TemporaryAccommodation")
                        .HasForeignKey("EmployeeEntityId");

                    b.HasOne("AnimalShelter.DataAccess.Entities.UserEntity", "User")
                        .WithMany("TemporaryAccommodation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.UserEntity", b =>
                {
                    b.HasOne("AnimalShelter.DataAccess.Entities.RoleEntity", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.AnimalEntity", b =>
                {
                    b.Navigation("Adoption");

                    b.Navigation("AdoptionApplication");

                    b.Navigation("TemporaryAccommodation");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.AnimalStatusEntity", b =>
                {
                    b.Navigation("Animal");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("Adoption");

                    b.Navigation("TemporaryAccommodation");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.RoleEntity", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.StatusAdoptionEntity", b =>
                {
                    b.Navigation("AdoptionApplication");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.TypeAnimalEntity", b =>
                {
                    b.Navigation("Animal");
                });

            modelBuilder.Entity("AnimalShelter.DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("Adoption");

                    b.Navigation("AdoptionApplication");

                    b.Navigation("Employee");

                    b.Navigation("TemporaryAccommodation");
                });
#pragma warning restore 612, 618
        }
    }
}
